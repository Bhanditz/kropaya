※ This is a comment

※ All definitions define for the rest of the scope, plus enclosed scopes
※ For definition blocks, all rhs are evaluated before binding; if you want to refer to other variables in the block simultaneously, you have to use quantification (usually μ) - non simultaneously, you must use explicit thunks and forcing

※ Variable definitions:

%let f = 3.

%let μy.
  y: Int.
  y = 3.
%end.

%let μa b.
  a = 3
  c = "zog" + (text b)
  b = a + 1
%end

※ Type definitions:

%let maybe = ∃a. <&some: a, &none>.

%let list = ∃y. μx. <&end, &cons: {&car: y, &cdr: x}>

%let shape = list Int.

※ Useful functions

%let μid.
  id: ∀x. x → x.
  id a = a.
%end

%let ∀a b. λt∈Foldable.
  foldl: (b → a → b) → b → t a → b
  fold
%end

※ Module definitions

%let μsplitChunk foo.
  splitChunk = case foo

  foo = {
    &chunk ⇒ \x → fold x splitChunk,
    &length ⇒ id
  }
%end

%let array = ∃the-shape type. μarray. ıget set lengths length.
  get: Int → array shape type → maybe type.
  get index the-array = %edge magic-array-get.

  set: Int → array shape type → type → either Text type.
  set index the-array the-value = %edge magic-array-set.

  lengths: array shape type → shape.
  lengths _ = the-shape.

  length: array shape type → Int.
  length _ = the-shape
%end
