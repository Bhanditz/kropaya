%let Prelude =
  ※ The start of the prelude 'contains' a number of Edges which are inserted initially by magic
  ※ Many of these are for basic types, and other things that are needed to get the initial machinery running

  ※ Some common types

  %let
    U = %edge magic-u
    ※ U notionally has the type ∀x. U x.
    ※ It is the type of all positive (value) x.
    F = %edge magic-f
    ※ F notionally has the type ∀x. F x.
    ※ It is the type of all negative (computation) x.
    ※ (%return ⌜U x⌝) fits in a negative hole that wants an x
    ※ That is, %return makes a simple computation out of a value.
    ※ (%thunk ⌜F x⌝) fits in a positive hole that wants an ⌜F x⌝
    ※ That is, %thunk wraps a simple computation in a value.
    ※ (%force ⌜U (F a)⌝) produces an ⌜a⌝
    ※ That is, %force unwraps a thunk and then runs the resulting computation.
    ※ Computation arrows (eg U a → F b) notionally are of type (U a ⇒ F b).
    ※ They can thus be pattern matched on the left, and destructed on the right.
    ※ Value arrows (eg U a → U b) notionally are of type (U a ⇒ U b).
    ※ They can be pattern matched on both the left and the right.
  %end

  %let μNum.
    ⊥ = %edge magic-bottom.
    ⊤ = %edge magic-top.
    Text = %edge magic-text.
    Num = %edge magic-num. ※ For now, num is just int. Fairly soon we will need an actual numerical hierarchy. I envisage three separate sets of typeclasses - one based on machine types, one based on infinite precision types, and one based on group theory.
    Int = Num.
  %end

  %let
    maybe = ∃a. <&some: a, &none>.
    either = ∃a. ∃b. <&left: a, &right: b>.
  %end

  %let μtruth and or not.
    truth = <&true, &false>.
    and^-: U truth → U truth → F truth.
    and^- <&true> <&true> = %return <&true>.
    and^- _ _ = %return <&false>.
    and^+: U truth → U truth → U truth.
    and^+ <&true> <&true> = <&true>.
    and^+ _ _ = <&false>.
    or^-: U truth → U truth → F truth.
    or^- <&false> <&false> = %return <&false>.
    or^- _ _ = %return <&true>.
    or^+: U truth → U truth → U truth.
    or^+ <&false> <&false> = <&false>.
    or^+ _ _ = <&true>.
    not^-: U truth → F truth.
    not^- <&true> = %return <&false>.
    not^- <&false> = %return <&true>.
    not^+: U truth → U truth.
    not^+ <&true> = <&false>.
    not^+ <&false> = <&true>.
  %end

  %let
    if^-: ∀a. ıcondition then else. U truth → U (U (F a)) → U (U (F a)) → F a.
    if^- condition then else = (condition {&true ⇒ \x → %force then, &false ⇒ \x → %force else}) &true.
    if^-: ∀a b. ıcondition then else. U truth → U (U (F a)) → U (U (F b)) → F (either a b).
    if^- condition then else = (condition {&true ⇒ \x → <&left ⇒ %force then>, &false ⇒ \x → <&right ⇒ %force else>}) &true.
    if^+: ∀a. ıcondition then else. U truth → U (U a) → U (U a) → U a.
    if^+ condition then else = condition {&true ⇒ then, &false ⇒ else}.
    if^+: ∀a b. ıcondition then else. U truth → U (U a) → U (U b) → U (either a b).
    if^+ condition then else = condition {&true ⇒ <&left ⇒ then>, &false ⇒ <&right ⇒ else>}.
  %end



  %let μlist.
    list = ∃y. <&end, &cons: {&car: y, &cdr: list y}>.
  %end
  %let
    Cons: ∀type. ı(head: type) (lst: list type).  U type → U (list type) → U (list type).
    Cons head lst = <&cons ⇒ {&car ⇒ head, &cdr ⇒ lst}>.
  %end
  ※ An example of the use of Cons:
  ※   Cons 3 &end ⊨ <&cons ⇒ {&car ⇒ 3, &cdr ⇒ <&end>}>.
  ※%let non-empty-list-of-y = ∀q r. ∃(x: q → r). ∃y. <&cons: {&car: y, &cdr: x y}>.
  ※%let list-of-2-or-more = non-empty-list-of-y (non-empty-list-of-y (list)).
  ※%let arbitrary-list = μx. <&end, &cons: ∃y. {&car: y, &cdr: x}>.
  ※ arbitrary-list is used like so:
  ※ <&cons ⇒ {&car ⇒ 3, &cdr ⇒ <&cons ⇒ {&car ⇒ "Foo", &cdr ⇒ <&end>}: arbitrary-list Text>}: arbitrary-list Number>

  %let BinaryNat = μnum start done.
    num = <&zero: num, &one: num, &done>.
    start = <&one: num, &zero: done>.
    done = <&done>.
  %end
  %let
    nat = BinaryNat#start.
  %end
  %let (Magma: ∀S. ∃(•: U S → U S → F S).) =
  %end
  %let (Semigroup: ∀S. ∃(•: U S → U S → F S).) = Magma •.
  %end
  %let (Monoid: ∀S. ∃(•: U S → U S → F S) (id: S).) =
    ※ We want to be able to show associativity and identity, that is:
    ※   ∀(a: S) (b: S) (c: S). (a • b) • c ≡ a • (b • c)
    ※   ∀(a: S). a • id ≡ id • a ≡ a
  %end
  %let μFoldable. (Foldable: ∃content-type. μfoldr foldl foldMap fold.) =
    fold: ∀x y. ∃(m: Monoid x y). U (Foldable content-type) → F m#S.
    fold = foldMap m id^-.
    foldMap: ∀x y. ∃(m: Monoid x y). U (U (Foldable content-type) → F m#S) → U (Foldable content-type) → F m#S.
    foldl: ∀a. U (U a → U content-type → F a) → U content-type → U (Foldable content-type) → F a.
  %end
  ※ To use this, we first make a foldable thing and name it
  ※ %let (arrayFolds: Foldable Array) =
  ※   ※ Define any 'overridden' members here
  ※ %end
  ※ Then, we can hoist and/or partially bind any of the members for convenience like so:
  ※ Assuming we have a list monoid called traceM, and traces are stored in a foldable, which happens to be an array here
  ※ %let
  ※   mergeTraces = arrayFolds#fold traceM.
  ※ %end
  ※ We can refactor this, make it more or less polymorphic, or swap out bits of it relatively easily.

  ※%let Foldable = ∃foldable. μfoldr foldMap foldrType foldMapType Foldable.
  ※  foldMapType = ∀m. ∃(x: Monoid m). (foldable → m) → foldable → m.
  ※  foldMap: foldMapType.
  ※  foldMap f = foldr (x#mappend ∘ f) x#mempty.
  ※
  ※  foldrType = ∀a b. (a → b → b) → b → foldable → b.
  ※  foldr: foldrType.
  ※  foldr f z t = appEndo (foldMap (Endo ∘ f) t) z 
  ※
  ※  foldl: ∀a b. (b → a → b) → b → foldable → b.
  ※  foldl f z t = appEndo (getDual (foldMap (Dual ∘ Endo ∘ flip f) t)) z.
  ※%end

  %let
    case : ∀ match-label match-type other-cases result. ıpattern it. {match-label:(match-type→result) |other-cases} → <match-label:match-type> → result.
    case pattern it = (match-label pattern) (match-label it).

    id^+ : ∀x. ı(it: x).  U x → U x.
    id^+ it = it.
    id^- : ∀x. ı(it: x).  U x → F x.
    id^- it = (%return it).
  %end

  ※ Usage:
  ※ show : either Text Text → Eff IO
  ※ show result = print (case {&left ⇒ \x → "error: #{x}", &right ⇒ id} result)

  %let 
    ※ Properties we want to be able to state: (eq: Quotient) ⊨ ∀m n o. eq m m. eq m n ≡ eq n m. (eq m n ∧ eq n o) → eq m o.
    Quotient^+ = ∃a. U a → U a → U truth.
    Quotient^- = ∃a. U a → U a → F truth.
  %end

  ※%let μget set lengths volume.
  ※  %let shape = list Int.
  ※  %let array = ∃(s:shape) type. %edge magic-array-body.
  ※  get: ∀type. Int → array shape type → maybe type.
  ※  get index the-array = %edge magic-array-get.
  ※
  ※  set: ∀type. Int → array shape type → type → either Text type.
  ※  set index the-array the-value = %edge magic-array-set.
  ※
  ※  lengths: ∀type. array shape type → list Int.
  ※  lengths _ = shape.
  ※
  ※  volume: ∀type. array shape type → Int.
  ※  volume _ = foldl shape (+) 0.
  ※%end


  ※ For now, we do map as a naive association-list.
  %let μmap keys values filter set get mapcar.
    map = ∃k v (comparator: Quotient k). list {&key: k, &value: v}.

    get: ∀keys values c. U keys → U (map keys values c) → U (maybe values).
    get key the-map = case { &end ⇒ \x → <&none>, &cons ⇒ (\x → (if (c the-key (&key (&car x))) (thunk (<&some⇒(&value x)>)) (thunk (get key (&cdr x))))) } the-map.

    set: ∀keys values c. keys → values → map keys values c → map keys values c.
    set key value the-map = <&cons⇒{&car⇒{&key⇒key, &value⇒value}, &cdr⇒filter (\x → not (c the-key x)) the-map}>.
    ※set key value the-map = case {&none ⇒ (\x → (<&cons⇒<&car⇒<&key⇒key, &value⇒value>, &cdr⇒the-map>>: map keys values c q)), &some⇒} (get key the-map)

    filter: ∀keys values c. (keys → truth) → map keys values c → map keys values c.
    filter pred the-map = case { &end ⇒ id, &cons ⇒ \x → (if (pred (&car x)) (thunk (<&cons⇒{&car⇒&car x, &cdr⇒filter pred (&cdr x)}>)) (thunk (filter pred (&cdr x)))) } the-map.

    ※ Use this janky mapcar for now
    mapcar: ∀a b. list a  → (a → b) → list b.
    mapcar in fn = case { &end ⇒ id, &cons ⇒ \x → <&cons⇒{&car⇒(fn (&car x)), &cdr⇒(mapcar (&cdr x))}> } in.

    keys: ∀k v q. map k v q  → list k.
    keys the-map = mapcar the-map &key.
    values: ∀k v q. map k v q → list v.
    values the-map = mapcar the-map &value.
  %end


  %let μlet lambda juxtaposition quantifier tree pattern type-function type variable literal label singular-row row product sum.
    tree = list <&let: let, &lambda: lambda, &juxtaposition: juxtaposition, &literal: literal, &variable: variable>.
    variable = Text.
    literal = <&text: Text, &number: Num, &product: product, &sum: sum, &singular-row: singular-row, &label: label, &underscore>.
    let = {&root: <&parent, &module: variable>, &quantifiers: list quantifier, &bindings: map variable (list <&judgement: type, &thing: {&pattern: pattern, &rhs: tree}>)}.
    lambda = {&arguments: list variable, &body: tree}.
    juxtaposition = list tree.
    quantifier = {&quantifier: <&forall, &exists, &fresh, &lambda, &mu>, &variables: list <&bare: variable, &constraint: {&variable: variable, &judgement: type}>}.
    pattern = list <&variable: variable, &literal: literal>.
    type-function = {&l: type, &r: type}.
    type = {&quantifiers: list quantifier, &formula: <&fn: type-function, &row: row, &literal: literal>}.
    label = <&literal: Text, &variable: variable>.
    singular-row = {&label: label, &extra: <&type: type, &value: tree, &nothing>}.
    row = {&fixed-rows: list singular-row, &polymorphic-extensions: list variable, &restrictions: list <&variable: variable, &literal-singular-row: singular-row, &literal-row: row>}.
    product = row.
    sum = row.
  %end

  %let
    read: Text → tree.
    read text = %edge magic-read
  %end
%end
