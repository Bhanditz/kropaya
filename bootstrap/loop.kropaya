module Prelude

type internal-state = 
type reader-state = {&1: internal-state, &2: scopes} 
type reader-external-state = <&more-please: reader-state, &runnable-fragment: {&ast: AST, &reader-state: reader-state}, &done, &push: reader-state, &pop: reader-state>.
function incremental-read: (universe: Universe, state: reader-state, char: stream characters) → reader-external-state
§incremental-read

coprogram loop
  initialise universe.
  in stream characters char.
  
  var state: reader-external-state.
  state ← <&more-please ⇒ blank-reader-state>
  switch state
    acase &more-please →
      state ← incremental-read @@ it char.
    acase &runnable-fragment →
      return-buffer ← eval @@ (&ast it)
      state ← <&more-please ⇒ (&reader-state it)>
    acase &done
      end loop.
    acase &push →
      create-new-scope @@ (&2 it).
      state ← <&more-please ⇒ it>
    acase &pop →
      close-scope @@
      state ← <&more-please ⇒ it>
  end switch
§loop

§Prelude
