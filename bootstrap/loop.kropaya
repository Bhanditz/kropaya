coprogram loop
  initialise universe.
  in stream characters char.
  out *.
  type reader-state = {&1: state, ...}
  var state: <&more-please: reader-state, &runnable-fragment: {&ast: AST, &reader-state: reader-state}, &done, &push: reader-state, &pop: reader-state>.
  start state &more-please.
  switch
    acase &more-please →
      state ← incremental-read @@ it char.
    acase &runnable-fragment →
      return-buffer ← eval @@ (&ast it)
      state ← <&more-please ⇒ (&reader-state it)>
    acase &done
      end loop.
    acase &push →
      create-new-scope @@ (&2 it).
      state ← <&more-please ⇒ it>
    acase &pop →
      close-scope @@
      state ← <&more-please ⇒ it>
  end switch
§loop
